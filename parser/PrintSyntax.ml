(* File generated by the BNF Converter (bnfc 2.9.5). *)

(* pretty-printer *)

open Printf

(* We use string buffers for efficient string concatenation.
   A document takes a buffer and an indentation, has side effects on the buffer
   and returns a new indentation. The indentation argument indicates the level
   of indentation to be used if a new line has to be started (because of what is
   already in the buffer) *)
type doc = Buffer.t -> int -> int

let rec printTree (printer : int -> 'a -> doc) (tree : 'a) : string =
  let buffer_init_size = 64 (* you may want to change this *) in
  let buffer = Buffer.create buffer_init_size in
  let _ = printer 0 tree buffer 0 in
  (* discard return value *)
  Buffer.contents buffer

let indent_width = 2
let spaces (i : int) : string = if i > 0 then String.make i ' ' else ""
let indent (i : int) : string = "\n" ^ spaces i

(* To avoid dependency on package extlib, which has
   Extlib.ExtChar.Char.is_whitespace, we employ the following awkward
   way to check a character for whitespace.
   Note: String.trim exists in the core libraries since Ocaml 4.00. *)
let isWhiteSpace (c : char) : bool = String.trim (String.make 1 c) = ""

(* this render function is written for C-style languages, you may want to change it *)
let render (s : string) : doc =
 fun buf i ->
  (* invariant: last char of the buffer is never whitespace *)
  let n = Buffer.length buf in
  let last = if n = 0 then None else Some (Buffer.nth buf (n - 1)) in
  let newindent =
    match s with "{" -> i + indent_width | "}" -> i - indent_width | _ -> i
  in
  let whitespace =
    match last with
    | None -> ""
    | Some '}' -> ( match s with ";" -> "" | _ -> indent newindent)
    | Some '{' | Some ';' -> if s = "}" then indent newindent else indent i
    | Some '[' | Some '(' -> ""
    | Some c -> (
        if isWhiteSpace c then ""
        else
          match s with
          | ";" | "," | ")" | "]" -> ""
          | "{" -> indent i
          | "}" -> indent newindent
          | _ -> if String.trim s = "" then "" else " ")
  in
  Buffer.add_string buf whitespace;
  Buffer.add_string buf s;
  newindent

let emptyDoc : doc = fun buf i -> i

let concatD (ds : doc list) : doc =
 fun buf i ->
  List.fold_left
    (fun accIndent elemDoc -> elemDoc buf accIndent)
    (emptyDoc buf i) ds

let parenth (d : doc) : doc = concatD [ render "("; d; render ")" ]
let prPrec (i : int) (j : int) (d : doc) : doc = if j < i then parenth d else d
let prtChar (_ : int) (c : char) : doc = render ("'" ^ Char.escaped c ^ "'")
let prtInt (_ : int) (i : int) : doc = render (string_of_int i)
let prtFloat (_ : int) (f : float) : doc = render (sprintf "%.15g" f)

let prtString (_ : int) (s : string) : doc =
  render ("\"" ^ String.escaped s ^ "\"")

let prtStellaIdent _ (AbsSyntax.StellaIdent i) : doc = render i

let rec prtStellaIdentListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtStellaIdent 0 x ]
  | _, x :: xs ->
      concatD [ prtStellaIdent 0 x; render ","; prtStellaIdentListBNFC 0 xs ]

let prtExtensionName _ (AbsSyntax.ExtensionName i) : doc = render i

let rec prtExtensionNameListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtExtensionName 0 x ]
  | _, x :: xs ->
      concatD
        [ prtExtensionName 0 x; render ","; prtExtensionNameListBNFC 0 xs ]

let prtMemoryAddress _ (AbsSyntax.MemoryAddress i) : doc = render i

let rec prtProgram (i : int) (e : AbsSyntax.program) : doc =
  match e with
  | AbsSyntax.AProgram (languagedecl, extensions, decls) ->
      prPrec i 0
        (concatD
           [
             prtLanguageDecl 0 languagedecl;
             prtExtensionListBNFC 0 extensions;
             prtDeclListBNFC 0 decls;
           ])

and prtLanguageDecl (i : int) (e : AbsSyntax.languageDecl) : doc =
  match e with
  | AbsSyntax.LanguageCore ->
      prPrec i 0 (concatD [ render "language"; render "core"; render ";" ])

and prtExtension (i : int) (e : AbsSyntax.extension) : doc =
  match e with
  | AbsSyntax.AnExtension extensionnames ->
      prPrec i 0
        (concatD
           [
             render "extend";
             render "with";
             prtExtensionNameListBNFC 0 extensionnames;
           ])

and prtExtensionListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, x :: xs ->
      concatD [ prtExtension 0 x; render ";"; prtExtensionListBNFC 0 xs ]

and prtDecl (i : int) (e : AbsSyntax.decl) : doc =
  match e with
  | AbsSyntax.DeclFun
      (annotations, stellaident, paramdecls, returntype, throwtype, decls, expr)
    ->
      prPrec i 0
        (concatD
           [
             prtAnnotationListBNFC 0 annotations;
             render "fn";
             prtStellaIdent 0 stellaident;
             render "(";
             prtParamDeclListBNFC 0 paramdecls;
             render ")";
             prtReturnType 0 returntype;
             prtThrowType 0 throwtype;
             render "{";
             prtDeclListBNFC 0 decls;
             render "return";
             prtExpr 0 expr;
             render "}";
           ])
  | AbsSyntax.DeclFunGeneric
      ( annotations,
        stellaident,
        stellaidents,
        paramdecls,
        returntype,
        throwtype,
        decls,
        expr ) ->
      prPrec i 0
        (concatD
           [
             prtAnnotationListBNFC 0 annotations;
             render "generic";
             render "fn";
             prtStellaIdent 0 stellaident;
             render "[";
             prtStellaIdentListBNFC 0 stellaidents;
             render "]";
             render "(";
             prtParamDeclListBNFC 0 paramdecls;
             render ")";
             prtReturnType 0 returntype;
             prtThrowType 0 throwtype;
             render "{";
             prtDeclListBNFC 0 decls;
             render "return";
             prtExpr 0 expr;
             render "}";
           ])
  | AbsSyntax.DeclTypeAlias (stellaident, type_) ->
      prPrec i 0
        (concatD
           [
             render "type";
             prtStellaIdent 0 stellaident;
             render "=";
             prtTypeT 0 type_;
           ])
  | AbsSyntax.DeclExceptionType type_ ->
      prPrec i 0
        (concatD
           [ render "exception"; render "type"; render "="; prtTypeT 0 type_ ])
  | AbsSyntax.DeclExceptionVariant (stellaident, type_) ->
      prPrec i 0
        (concatD
           [
             render "exception";
             render "variant";
             prtStellaIdent 0 stellaident;
             render ":";
             prtTypeT 0 type_;
           ])

and prtDeclListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, x :: xs -> concatD [ prtDecl 0 x; prtDeclListBNFC 0 xs ]

and prtLocalDecl (i : int) (e : AbsSyntax.localDecl) : doc =
  match e with
  | AbsSyntax.ALocalDecl decl -> prPrec i 0 (concatD [ prtDecl 0 decl ])

and prtLocalDeclListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, x :: xs ->
      concatD [ prtLocalDecl 0 x; render ";"; prtLocalDeclListBNFC 0 xs ]

and prtAnnotation (i : int) (e : AbsSyntax.annotation) : doc =
  match e with
  | AbsSyntax.InlineAnnotation -> prPrec i 0 (concatD [ render "inline" ])

and prtAnnotationListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, x :: xs -> concatD [ prtAnnotation 0 x; prtAnnotationListBNFC 0 xs ]

and prtParamDecl (i : int) (e : AbsSyntax.paramDecl) : doc =
  match e with
  | AbsSyntax.AParamDecl (stellaident, type_) ->
      prPrec i 0
        (concatD [ prtStellaIdent 0 stellaident; render ":"; prtTypeT 0 type_ ])

and prtParamDeclListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtParamDecl 0 x ]
  | _, x :: xs ->
      concatD [ prtParamDecl 0 x; render ","; prtParamDeclListBNFC 0 xs ]

and prtReturnType (i : int) (e : AbsSyntax.returnType) : doc =
  match e with
  | AbsSyntax.NoReturnType -> prPrec i 0 (concatD [])
  | AbsSyntax.SomeReturnType type_ ->
      prPrec i 0 (concatD [ render "->"; prtTypeT 0 type_ ])

and prtThrowType (i : int) (e : AbsSyntax.throwType) : doc =
  match e with
  | AbsSyntax.NoThrowType -> prPrec i 0 (concatD [])
  | AbsSyntax.SomeThrowType types ->
      prPrec i 0 (concatD [ render "throws"; prtTypeTListBNFC 9 types ])

and prtTypeT (i : int) (e : AbsSyntax.typeT) : doc =
  match e with
  | AbsSyntax.TypeFun (types, type_) ->
      prPrec i 0
        (concatD
           [
             render "fn";
             render "(";
             prtTypeTListBNFC 0 types;
             render ")";
             render "->";
             prtTypeT 0 type_;
           ])
  | AbsSyntax.TypeForAll (stellaidents, type_) ->
      prPrec i 0
        (concatD
           [
             render "forall";
             prtStellaIdentListBNFC 0 stellaidents;
             render ".";
             prtTypeT 0 type_;
           ])
  | AbsSyntax.TypeRec (stellaident, type_) ->
      prPrec i 0
        (concatD
           [
             render "Âµ";
             prtStellaIdent 0 stellaident;
             render ".";
             prtTypeT 0 type_;
           ])
  | AbsSyntax.TypeSum (type_1, type_2) ->
      prPrec i 1 (concatD [ prtTypeT 2 type_1; render "+"; prtTypeT 2 type_2 ])
  | AbsSyntax.TypeTuple types ->
      prPrec i 2 (concatD [ render "{"; prtTypeTListBNFC 0 types; render "}" ])
  | AbsSyntax.TypeRecord recordfieldtypes ->
      prPrec i 2
        (concatD
           [
             render "{";
             prtRecordFieldTypeListBNFC 0 recordfieldtypes;
             render "}";
           ])
  | AbsSyntax.TypeVariant variantfieldtypes ->
      prPrec i 2
        (concatD
           [
             render "<|";
             prtVariantFieldTypeListBNFC 0 variantfieldtypes;
             render "|>";
           ])
  | AbsSyntax.TypeList type_ ->
      prPrec i 2 (concatD [ render "["; prtTypeT 0 type_; render "]" ])
  | AbsSyntax.TypeBool -> prPrec i 3 (concatD [ render "Bool" ])
  | AbsSyntax.TypeNat -> prPrec i 3 (concatD [ render "Nat" ])
  | AbsSyntax.TypeUnit -> prPrec i 3 (concatD [ render "Unit" ])
  | AbsSyntax.TypeTop -> prPrec i 3 (concatD [ render "Top" ])
  | AbsSyntax.TypeBottom -> prPrec i 3 (concatD [ render "Bot" ])
  | AbsSyntax.TypeRef type_ ->
      prPrec i 3 (concatD [ render "&"; prtTypeT 2 type_ ])
  | AbsSyntax.TypeVar stellaident ->
      prPrec i 3 (concatD [ prtStellaIdent 0 stellaident ])

and prtTypeTListBNFC i es : doc =
  match (i, es) with
  | 9, [ x ] -> concatD [ prtTypeT 9 x ]
  | 9, x :: xs -> concatD [ prtTypeT 9 x; render ","; prtTypeTListBNFC 9 xs ]
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtTypeT 0 x ]
  | _, x :: xs -> concatD [ prtTypeT 0 x; render ","; prtTypeTListBNFC 0 xs ]

and prtMatchCase (i : int) (e : AbsSyntax.matchCase) : doc =
  match e with
  | AbsSyntax.AMatchCase (pattern, expr) ->
      prPrec i 0 (concatD [ prtPattern 0 pattern; render "=>"; prtExpr 0 expr ])

and prtMatchCaseListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtMatchCase 0 x ]
  | _, x :: xs ->
      concatD [ prtMatchCase 0 x; render "|"; prtMatchCaseListBNFC 0 xs ]

and prtOptionalTyping (i : int) (e : AbsSyntax.optionalTyping) : doc =
  match e with
  | AbsSyntax.NoTyping -> prPrec i 0 (concatD [])
  | AbsSyntax.SomeTyping type_ ->
      prPrec i 0 (concatD [ render ":"; prtTypeT 0 type_ ])

and prtPatternData (i : int) (e : AbsSyntax.patternData) : doc =
  match e with
  | AbsSyntax.NoPatternData -> prPrec i 0 (concatD [])
  | AbsSyntax.SomePatternData pattern ->
      prPrec i 0 (concatD [ render "="; prtPattern 0 pattern ])

and prtExprData (i : int) (e : AbsSyntax.exprData) : doc =
  match e with
  | AbsSyntax.NoExprData -> prPrec i 0 (concatD [])
  | AbsSyntax.SomeExprData expr ->
      prPrec i 0 (concatD [ render "="; prtExpr 0 expr ])

and prtPattern (i : int) (e : AbsSyntax.pattern) : doc =
  match e with
  | AbsSyntax.PatternAsc (pattern, type_) ->
      prPrec i 0
        (concatD [ prtPattern 0 pattern; render "as"; prtTypeT 0 type_ ])
  | AbsSyntax.PatternVariant (stellaident, patterndata) ->
      prPrec i 0
        (concatD
           [
             render "<|";
             prtStellaIdent 0 stellaident;
             prtPatternData 0 patterndata;
             render "|>";
           ])
  | AbsSyntax.PatternInl pattern ->
      prPrec i 0
        (concatD [ render "inl"; render "("; prtPattern 0 pattern; render ")" ])
  | AbsSyntax.PatternInr pattern ->
      prPrec i 0
        (concatD [ render "inr"; render "("; prtPattern 0 pattern; render ")" ])
  | AbsSyntax.PatternTuple patterns ->
      prPrec i 0
        (concatD [ render "{"; prtPatternListBNFC 0 patterns; render "}" ])
  | AbsSyntax.PatternRecord labelledpatterns ->
      prPrec i 0
        (concatD
           [
             render "{";
             prtLabelledPatternListBNFC 0 labelledpatterns;
             render "}";
           ])
  | AbsSyntax.PatternList patterns ->
      prPrec i 0
        (concatD [ render "["; prtPatternListBNFC 0 patterns; render "]" ])
  | AbsSyntax.PatternCons (pattern1, pattern2) ->
      prPrec i 0
        (concatD
           [
             render "cons";
             render "(";
             prtPattern 0 pattern1;
             render ",";
             prtPattern 0 pattern2;
             render ")";
           ])
  | AbsSyntax.PatternFalse -> prPrec i 0 (concatD [ render "false" ])
  | AbsSyntax.PatternTrue -> prPrec i 0 (concatD [ render "true" ])
  | AbsSyntax.PatternUnit -> prPrec i 0 (concatD [ render "unit" ])
  | AbsSyntax.PatternInt integer -> prPrec i 0 (concatD [ prtInt 0 integer ])
  | AbsSyntax.PatternSucc pattern ->
      prPrec i 0
        (concatD
           [ render "succ"; render "("; prtPattern 0 pattern; render ")" ])
  | AbsSyntax.PatternVar stellaident ->
      prPrec i 0 (concatD [ prtStellaIdent 0 stellaident ])

and prtPatternListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtPattern 0 x ]
  | _, x :: xs ->
      concatD [ prtPattern 0 x; render ","; prtPatternListBNFC 0 xs ]

and prtLabelledPattern (i : int) (e : AbsSyntax.labelledPattern) : doc =
  match e with
  | AbsSyntax.ALabelledPattern (stellaident, pattern) ->
      prPrec i 0
        (concatD
           [ prtStellaIdent 0 stellaident; render "="; prtPattern 0 pattern ])

and prtLabelledPatternListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtLabelledPattern 0 x ]
  | _, x :: xs ->
      concatD
        [ prtLabelledPattern 0 x; render ","; prtLabelledPatternListBNFC 0 xs ]

and prtBinding (i : int) (e : AbsSyntax.binding) : doc =
  match e with
  | AbsSyntax.ABinding (stellaident, expr) ->
      prPrec i 0
        (concatD [ prtStellaIdent 0 stellaident; render "="; prtExpr 0 expr ])

and prtBindingListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtBinding 0 x ]
  | _, x :: xs ->
      concatD [ prtBinding 0 x; render ","; prtBindingListBNFC 0 xs ]

and prtExpr (i : int) (e : AbsSyntax.expr) : doc =
  match e with
  | AbsSyntax.Sequence (expr1, expr2) ->
      prPrec i 0 (concatD [ prtExpr 1 expr1; render ";"; prtExpr 0 expr2 ])
  | AbsSyntax.Assign (expr1, expr2) ->
      prPrec i 1 (concatD [ prtExpr 2 expr1; render ":="; prtExpr 1 expr2 ])
  | AbsSyntax.If (expr1, expr2, expr3) ->
      prPrec i 1
        (concatD
           [
             render "if";
             prtExpr 1 expr1;
             render "then";
             prtExpr 1 expr2;
             render "else";
             prtExpr 1 expr3;
           ])
  | AbsSyntax.Let (patternbindings, expr) ->
      prPrec i 0
        (concatD
           [
             render "let";
             prtPatternBindingListBNFC 0 patternbindings;
             render "in";
             prtExpr 0 expr;
           ])
  | AbsSyntax.LetRec (patternbindings, expr) ->
      prPrec i 0
        (concatD
           [
             render "letrec";
             prtPatternBindingListBNFC 0 patternbindings;
             render "in";
             prtExpr 0 expr;
           ])
  | AbsSyntax.TypeAbstraction (stellaidents, expr) ->
      prPrec i 0
        (concatD
           [
             render "generic";
             render "[";
             prtStellaIdentListBNFC 0 stellaidents;
             render "]";
             prtExpr 0 expr;
           ])
  | AbsSyntax.LessThan (expr1, expr2) ->
      prPrec i 2 (concatD [ prtExpr 3 expr1; render "<"; prtExpr 3 expr2 ])
  | AbsSyntax.LessThanOrEqual (expr1, expr2) ->
      prPrec i 2 (concatD [ prtExpr 3 expr1; render "<="; prtExpr 3 expr2 ])
  | AbsSyntax.GreaterThan (expr1, expr2) ->
      prPrec i 2 (concatD [ prtExpr 3 expr1; render ">"; prtExpr 3 expr2 ])
  | AbsSyntax.GreaterThanOrEqual (expr1, expr2) ->
      prPrec i 2 (concatD [ prtExpr 3 expr1; render ">="; prtExpr 3 expr2 ])
  | AbsSyntax.Equal (expr1, expr2) ->
      prPrec i 2 (concatD [ prtExpr 3 expr1; render "=="; prtExpr 3 expr2 ])
  | AbsSyntax.NotEqual (expr1, expr2) ->
      prPrec i 2 (concatD [ prtExpr 3 expr1; render "!="; prtExpr 3 expr2 ])
  | AbsSyntax.TypeAsc (expr, type_) ->
      prPrec i 3 (concatD [ prtExpr 3 expr; render "as"; prtTypeT 2 type_ ])
  | AbsSyntax.TypeCast (expr, type_) ->
      prPrec i 3
        (concatD
           [ prtExpr 3 expr; render "cast"; render "as"; prtTypeT 2 type_ ])
  | AbsSyntax.Abstraction (paramdecls, expr) ->
      prPrec i 3
        (concatD
           [
             render "fn";
             render "(";
             prtParamDeclListBNFC 0 paramdecls;
             render ")";
             render "{";
             render "return";
             prtExpr 0 expr;
             render "}";
           ])
  | AbsSyntax.Variant (stellaident, exprdata) ->
      prPrec i 3
        (concatD
           [
             render "<|";
             prtStellaIdent 0 stellaident;
             prtExprData 0 exprdata;
             render "|>";
           ])
  | AbsSyntax.Match (expr, matchcases) ->
      prPrec i 3
        (concatD
           [
             render "match";
             prtExpr 2 expr;
             render "{";
             prtMatchCaseListBNFC 0 matchcases;
             render "}";
           ])
  | AbsSyntax.List exprs ->
      prPrec i 3 (concatD [ render "["; prtExprListBNFC 0 exprs; render "]" ])
  | AbsSyntax.Add (expr1, expr2) ->
      prPrec i 3 (concatD [ prtExpr 3 expr1; render "+"; prtExpr 4 expr2 ])
  | AbsSyntax.Subtract (expr1, expr2) ->
      prPrec i 3 (concatD [ prtExpr 3 expr1; render "-"; prtExpr 4 expr2 ])
  | AbsSyntax.LogicOr (expr1, expr2) ->
      prPrec i 3 (concatD [ prtExpr 3 expr1; render "or"; prtExpr 4 expr2 ])
  | AbsSyntax.Multiply (expr1, expr2) ->
      prPrec i 4 (concatD [ prtExpr 4 expr1; render "*"; prtExpr 5 expr2 ])
  | AbsSyntax.Divide (expr1, expr2) ->
      prPrec i 4 (concatD [ prtExpr 4 expr1; render "/"; prtExpr 5 expr2 ])
  | AbsSyntax.LogicAnd (expr1, expr2) ->
      prPrec i 4 (concatD [ prtExpr 4 expr1; render "and"; prtExpr 5 expr2 ])
  | AbsSyntax.Ref expr ->
      prPrec i 5
        (concatD [ render "new"; render "("; prtExpr 5 expr; render ")" ])
  | AbsSyntax.Deref expr -> prPrec i 5 (concatD [ render "*"; prtExpr 5 expr ])
  | AbsSyntax.Application (expr, exprs) ->
      prPrec i 6
        (concatD
           [ prtExpr 6 expr; render "("; prtExprListBNFC 0 exprs; render ")" ])
  | AbsSyntax.TypeApplication (expr, types) ->
      prPrec i 6
        (concatD
           [ prtExpr 6 expr; render "["; prtTypeTListBNFC 0 types; render "]" ])
  | AbsSyntax.DotRecord (expr, stellaident) ->
      prPrec i 6
        (concatD [ prtExpr 6 expr; render "."; prtStellaIdent 0 stellaident ])
  | AbsSyntax.DotTuple (expr, integer) ->
      prPrec i 6 (concatD [ prtExpr 6 expr; render "."; prtInt 0 integer ])
  | AbsSyntax.Tuple exprs ->
      prPrec i 6 (concatD [ render "{"; prtExprListBNFC 0 exprs; render "}" ])
  | AbsSyntax.Record bindings ->
      prPrec i 6
        (concatD [ render "{"; prtBindingListBNFC 0 bindings; render "}" ])
  | AbsSyntax.ConsList (expr1, expr2) ->
      prPrec i 6
        (concatD
           [
             render "cons";
             render "(";
             prtExpr 0 expr1;
             render ",";
             prtExpr 0 expr2;
             render ")";
           ])
  | AbsSyntax.Head expr ->
      prPrec i 6
        (concatD
           [ render "List::head"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.IsEmpty expr ->
      prPrec i 6
        (concatD
           [ render "List::isempty"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.Tail expr ->
      prPrec i 6
        (concatD
           [ render "List::tail"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.Panic -> prPrec i 6 (concatD [ render "panic!" ])
  | AbsSyntax.Throw expr ->
      prPrec i 6
        (concatD [ render "throw"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.TryCatch (expr1, pattern, expr2) ->
      prPrec i 6
        (concatD
           [
             render "try";
             render "{";
             prtExpr 0 expr1;
             render "}";
             render "catch";
             render "{";
             prtPattern 0 pattern;
             render "=>";
             prtExpr 0 expr2;
             render "}";
           ])
  | AbsSyntax.TryWith (expr1, expr2) ->
      prPrec i 6
        (concatD
           [
             render "try";
             render "{";
             prtExpr 0 expr1;
             render "}";
             render "with";
             render "{";
             prtExpr 0 expr2;
             render "}";
           ])
  | AbsSyntax.Inl expr ->
      prPrec i 6
        (concatD [ render "inl"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.Inr expr ->
      prPrec i 6
        (concatD [ render "inr"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.Succ expr ->
      prPrec i 6
        (concatD [ render "succ"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.LogicNot expr ->
      prPrec i 6
        (concatD [ render "not"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.Pred expr ->
      prPrec i 6
        (concatD [ render "Nat::pred"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.IsZero expr ->
      prPrec i 6
        (concatD
           [ render "Nat::iszero"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.Fix expr ->
      prPrec i 6
        (concatD [ render "fix"; render "("; prtExpr 0 expr; render ")" ])
  | AbsSyntax.NatRec (expr1, expr2, expr3) ->
      prPrec i 6
        (concatD
           [
             render "Nat::rec";
             render "(";
             prtExpr 0 expr1;
             render ",";
             prtExpr 0 expr2;
             render ",";
             prtExpr 0 expr3;
             render ")";
           ])
  | AbsSyntax.Fold (type_, expr) ->
      prPrec i 6
        (concatD
           [
             render "fold";
             render "[";
             prtTypeT 0 type_;
             render "]";
             prtExpr 7 expr;
           ])
  | AbsSyntax.Unfold (type_, expr) ->
      prPrec i 6
        (concatD
           [
             render "unfold";
             render "[";
             prtTypeT 0 type_;
             render "]";
             prtExpr 7 expr;
           ])
  | AbsSyntax.ConstTrue -> prPrec i 7 (concatD [ render "true" ])
  | AbsSyntax.ConstFalse -> prPrec i 7 (concatD [ render "false" ])
  | AbsSyntax.ConstUnit -> prPrec i 7 (concatD [ render "unit" ])
  | AbsSyntax.ConstInt integer -> prPrec i 7 (concatD [ prtInt 0 integer ])
  | AbsSyntax.ConstMemory memoryaddress ->
      prPrec i 7 (concatD [ prtMemoryAddress 0 memoryaddress ])
  | AbsSyntax.Var stellaident ->
      prPrec i 7 (concatD [ prtStellaIdent 0 stellaident ])

and prtExprListBNFC i es : doc =
  match (i, es) with
  | 2, [ x ] -> concatD [ prtExpr 2 x; render ";" ]
  | 2, x :: xs -> concatD [ prtExpr 2 x; render ";"; prtExprListBNFC 2 xs ]
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtExpr 0 x ]
  | _, x :: xs -> concatD [ prtExpr 0 x; render ","; prtExprListBNFC 0 xs ]

and prtPatternBinding (i : int) (e : AbsSyntax.patternBinding) : doc =
  match e with
  | AbsSyntax.APatternBinding (pattern, expr) ->
      prPrec i 0 (concatD [ prtPattern 0 pattern; render "="; prtExpr 0 expr ])

and prtPatternBindingListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtPatternBinding 0 x ]
  | _, x :: xs ->
      concatD
        [ prtPatternBinding 0 x; render ","; prtPatternBindingListBNFC 0 xs ]

and prtVariantFieldType (i : int) (e : AbsSyntax.variantFieldType) : doc =
  match e with
  | AbsSyntax.AVariantFieldType (stellaident, optionaltyping) ->
      prPrec i 0
        (concatD
           [ prtStellaIdent 0 stellaident; prtOptionalTyping 0 optionaltyping ])

and prtVariantFieldTypeListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtVariantFieldType 0 x ]
  | _, x :: xs ->
      concatD
        [
          prtVariantFieldType 0 x; render ","; prtVariantFieldTypeListBNFC 0 xs;
        ]

and prtRecordFieldType (i : int) (e : AbsSyntax.recordFieldType) : doc =
  match e with
  | AbsSyntax.ARecordFieldType (stellaident, type_) ->
      prPrec i 0
        (concatD [ prtStellaIdent 0 stellaident; render ":"; prtTypeT 0 type_ ])

and prtRecordFieldTypeListBNFC i es : doc =
  match (i, es) with
  | _, [] -> concatD []
  | _, [ x ] -> concatD [ prtRecordFieldType 0 x ]
  | _, x :: xs ->
      concatD
        [ prtRecordFieldType 0 x; render ","; prtRecordFieldTypeListBNFC 0 xs ]

and prtTyping (i : int) (e : AbsSyntax.typing) : doc =
  match e with
  | AbsSyntax.ATyping (expr, type_) ->
      prPrec i 0 (concatD [ prtExpr 0 expr; render ":"; prtTypeT 0 type_ ])
